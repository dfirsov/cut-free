{-#  OPTIONS --type-in-type #-}

module SR-vs-MIR where

open import Data.Empty
open import Data.Product
open import Data.Sum
open import Function
open import Data.Nat
open import Data.Fin hiding (_+_)
open import Data.List
open import Data.List.Membership.Propositional using (_‚àà_)
open import Data.List.Any  hiding (map)
open import Data.Vec hiding (_++_)
open import Data.Unit hiding (_‚âü_)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary
open import Data.Bool renaming (_‚àß_ to _&_; _‚à®_ to _‚à£_)
open import Data.Maybe

open import ListIn
open import Formula
open import FormulaExamples
open import LFP

NatRaw1 = Œº (unit ‚à® (Œº BoolRaw))

Nat1 : Set
Nat1 = ‚ü¶ NatRaw1 ‚üßF  nothing

z1 : Nat1
z1 = In (inj‚ÇÅ tt)

s1 : ùîπ ‚Üí Nat1
s1 b = In (inj‚ÇÇ (In b))


module SingleRecNatBoolChar where

  open import SR


  charf2 :  (d : just (var ‚à∑ [] ‚áí unit ‚à® unit) ‚ä¢  Œº (unit ‚à® unit) ‚à∑ [] ‚áí unit ‚à® unit)
   ‚Üí (œÜ : Mu (Œª X ‚Üí ‚ä§ ‚äé Mu (Œª X‚ÇÅ ‚Üí ‚ä§ ‚äé ‚ä§)) √ó ‚ä§ ‚Üí ‚ä§ ‚äé ‚ä§)
    ‚Üí ‚ü¶ d ‚üß ((just (Mu (Œª X ‚Üí ‚ä§ ‚äé Mu (Œª X‚ÇÅ ‚Üí ‚ä§ ‚äé ‚ä§))))) œÜ (In (inj‚ÇÅ tt) , tt) ‚â° ‚ü¶ d ‚üß ((just (Mu (Œª X ‚Üí ‚ä§ ‚äé Mu (Œª X‚ÇÅ ‚Üí ‚ä§ ‚äé ‚ä§))))) œÜ (In (inj‚ÇÇ tt) , tt)
  charf2 (‚à®-r‚ÇÅ d) œÜ  = refl
  charf2 (‚à®-r‚ÇÇ d) œÜ  = refl
  charf2 (weakn (‚à®-r‚ÇÅ d)) œÜ  = refl
  charf2 (weakn (‚à®-r‚ÇÇ d)) œÜ  = refl
  charf2 (weakn (exchng () d)) œÜ 
  charf2 (exchng herex d) œÜ  = charf2 d œÜ
  charf2 (exchng (therex ()) d) œÜ

  charf3 :  (d : just (var ‚à∑ [] ‚áí unit ‚à® unit) ‚ä¢  unit ‚à® Œº (unit ‚à® unit) ‚à∑ [] ‚áí unit ‚à® unit)
   ‚Üí (œÜ : Mu (Œª X ‚Üí ‚ä§ ‚äé Mu (Œª X‚ÇÅ ‚Üí ‚ä§ ‚äé ‚ä§)) √ó ‚ä§ ‚Üí ‚ä§ ‚äé ‚ä§)
    ‚Üí ‚ü¶ d ‚üß ((just (Mu (Œª X ‚Üí ‚ä§ ‚äé Mu (Œª X‚ÇÅ ‚Üí ‚ä§ ‚äé ‚ä§))))) œÜ (inj‚ÇÇ (In (inj‚ÇÅ tt)) , tt) ‚â° ‚ü¶ d ‚üß ((just (Mu (Œª X ‚Üí ‚ä§ ‚äé Mu (Œª X‚ÇÅ ‚Üí ‚ä§ ‚äé ‚ä§))))) œÜ ((inj‚ÇÇ (In (inj‚ÇÇ tt)) , tt))
  charf3 (‚à®-r‚ÇÅ d) œÜ = refl
  charf3 (‚à®-r‚ÇÇ d) œÜ = refl
  charf3 (‚à®-l d d‚ÇÅ) œÜ = charf2  d‚ÇÅ _
  charf3 (weakn d) œÜ = refl
  charf3 (exchng herex d) œÜ = charf3 d œÜ
  charf3 (exchng (therex ()) d) œÜ


  charf :  (d : nothing ‚ä¢ NatRaw1 ‚à∑ [] ‚áí BoolRaw) ‚Üí (b : ùîπ) ‚Üí  ‚ü¶ d ‚üß nothing tt (s1 (inj‚ÇÅ tt) , tt) ‚â° ‚ü¶ d ‚üß nothing tt (s1 (inj‚ÇÇ tt) , tt)
  charf (‚à®-r‚ÇÅ d) b  =  refl
  charf (‚à®-r‚ÇÇ d) b  =  refl
  charf (Œº-l (‚à®-r‚ÇÅ d) x x‚ÇÅ) (inj‚ÇÅ tt)  =  refl
  charf (Œº-l (‚à®-r‚ÇÇ d) x x‚ÇÅ) (inj‚ÇÅ tt)  =  refl
  charf (Œº-l (‚à®-l d‚ÇÅ d‚ÇÇ) x x‚ÇÅ) (inj‚ÇÅ tt) rewrite x‚ÇÅ = charf2 d‚ÇÇ _
  charf (Œº-l (weakn (‚à®-r‚ÇÅ d)) x x‚ÇÅ) (inj‚ÇÅ tt)  =  refl
  charf (Œº-l (weakn (‚à®-r‚ÇÇ d)) x x‚ÇÅ) (inj‚ÇÅ tt)  =  refl 
  charf (Œº-l (weakn (exchng () d)) x x‚ÇÅ) (inj‚ÇÅ tt)
  charf (Œº-l (exchng herex d) x x‚ÇÅ) (inj‚ÇÅ tt) rewrite x‚ÇÅ = charf3 d _
  charf (Œº-l (exchng (therex ()) d) x x‚ÇÅ) (inj‚ÇÅ tt)

  charf (Œº-l (‚à®-r‚ÇÅ d) x x‚ÇÅ) (inj‚ÇÇ tt) = refl
  charf (Œº-l (‚à®-r‚ÇÇ d) x x‚ÇÅ) (inj‚ÇÇ tt) = refl
  charf (Œº-l (‚à®-l d d‚ÇÅ) x x‚ÇÅ) (inj‚ÇÇ tt) rewrite x‚ÇÅ = charf2 d‚ÇÅ _
  charf (Œº-l (weakn d) x x‚ÇÅ) (inj‚ÇÇ tt) = refl
  charf (Œº-l (exchng herex d) x x‚ÇÅ) (inj‚ÇÇ tt) rewrite x‚ÇÅ = charf3 d _
  charf (Œº-l (exchng (therex ()) d) x x‚ÇÅ) (inj‚ÇÇ tt) 

  charf (weakn (‚à®-r‚ÇÅ unit-r)) b  =  refl
  charf (weakn (‚à®-r‚ÇÅ (exchng () d))) b
  charf (weakn (‚à®-r‚ÇÇ unit-r)) b  =  refl
  charf (weakn (‚à®-r‚ÇÇ (exchng () d))) b
  charf (weakn (exchng () d)) b
  charf (exchng herex d) b = charf d b
  charf (exchng (therex ()) d) b




module MultIndRecSepExample where

  open import MIR

  {- separation example -}
  ce :  nothing ‚ä¢ NatRaw1 ‚à∑ [] ‚áí BoolRaw
  ce = Œº-l (‚à®-l (‚à®-r‚ÇÅ unit-r)  (Œº-l (‚à®-l (‚à®-r‚ÇÅ unit-r) (‚à®-r‚ÇÇ unit-r)) refl refl)) refl refl

  charf-ce : ‚ü¶ ce ‚üß nothing tt (s1 (inj‚ÇÅ tt) , tt) ‚â° ‚ü¶ ce ‚üß nothing tt (s1 (inj‚ÇÇ tt) , tt) ‚Üí ‚ä•
  charf-ce ()

